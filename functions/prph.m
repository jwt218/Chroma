function [PRPH,PR,PH] = prph(DF,RM,refcomp,varargin)

%PRPH Pristane/Phytane ratio
%   PRPH = prph(DF,RM,refcomp) returns the Pr/Ph value of the sample
%   chromatogram DF using the standard chromatogram of RM and available
%   component numbers of the standard refcomp. DF and RM must be in the
%   output data structure generated by the prepfiles function. 
%
%   [PRPH,PR,PH] = prph(DF,RM,refcomp) returns the Pr/Ph value and the
%   peak areas of Pr and Ph. 
%
%   PRPH = prph(DF,RM,refcomp,'smthreshold',smth) sets the minimum 
%   threshold smth for peak detections in the sample chromatogram. The
%   default is 100.
%
%   PRPH = prph(DF,RM,refcomp,'rmthreshold',rmth) sets the minimum 
%   threshold rmth for peak detections in the standard chromatogram. The
%   default is 25000.
%
%   PRPH = prph(DF,RM,refcomp,'cutoff',cut) sets the start time for the
%   analysis. For example, if the analysis window begins after 10 minutes,
%   cut = 10 will remove all peaks before 10 minutes. This is intended for
%   the removal of detector responses from the solvent. The default is 10.
%
%   PRPH = prph(DF,RM,refcomp,'ds',ds) sets the acceptable uncertainty 
%   window for standard peak to sample peak correlations. Detected sample
%   peaks outside the number of points specified by ds will be filtered
%   out. The default is 40.
%
%   PRPH = prph(DF,RM,refcomp,'view',v) gives the option for generating a
%   figure after the analysis. Enter v = 'yes' to view the plot or v = 'no'
%   otherwise. The default is v = 'yes'. 
%
%   PRPH = prph(DF,RM,refcomp,'xrange',x) defines the plotting range if the
%   view option is activated. For chromatograms with time units in minutes,
%   x = [11 25] plots only for the range 11-25 minutes. The default is x =
%   [11 25].


defsmthreshold = 100;
defrmthreshold = 25000;
defcutoff = 10;
defds = 40;
defview = 'yes';
defxrange = [11 25];
defpad = [];
defmethod = 'gauss';

expview = {'yes','no'};
expmethod = {'gauss','drop','base','deriv2','tan'};

p = inputParser; 
validsmthreshold = @(x) isnumeric(x) && isscalar(x);
validrmthreshold = @(x) isnumeric(x) && isscalar(x);
validcutoff = @(x) isnumeric(x) && isscalar(x);
validds = @(x) isnumeric(x) && isscalar(x);
validview = @(x) any(validatestring(x,expview));
validxrange = @(x) isnumeric(x) && length(x) == 2;
validpad = @(x) isnumeric(x);
validmethod = @(x) any(validatestring(x,expmethod));

addRequired(p,'DF');
addRequired(p,'RM');
addRequired(p,'refcomp');

addParameter(p,'smthreshold',defsmthreshold,validsmthreshold)
addParameter(p,'rmthreshold',defrmthreshold,validrmthreshold)
addParameter(p,'cutoff',defcutoff,validcutoff)
addParameter(p,'ds',defds,validds)
addParameter(p,'view',defview,validview)
addParameter(p,'xrange',defxrange,validxrange)
addParameter(p,'pad',defpad,validpad)
addParameter(p,'method',defmethod,validmethod)

parse(p,DF,RM,refcomp,varargin{:})

if ~isempty(fieldnames(p.Unmatched))
   disp('Extra inputs:')
   disp(p.Unmatched)
end

%%% input files
%ch = readmatrix(samp); % Excel file with 2 columns [Time;Intensity]
%rs = readmatrix(ref); % Reference standard - same format

DF = p.Results.DF;
RM = p.Results.RM;

ch = DF.X.M;
rs = RM.X.M;

%%% input parameters: may need to adjust these depending on data
smthreshold = p.Results.smthreshold; % min peak criterion (fA above baseline)
rmthreshold = p.Results.rmthreshold;
xl = p.Results.xrange; % plotting x-range
cut = p.Results.cutoff; % start of analysis (min) -- remove hexane peak
ds = p.Results.ds; % maximum distance permitted from standard (s)
nc = p.Results.refcomp(:);
view = p.Results.view;

%%% reorganize data
x = ch(:,1); y = ch(:,2);
rx = rs(:,1); ry = rs(:,2);
dt = mean(diff(x));

%%% find baseline and subtract it out
ci = find(x == cut);
yc = y(ci:end); xc = x(ci:end);
rcx = rx(ci:end); rcy = ry(ci:end);
sep = 10;
tf = islocalmin(yc, 'MinProminence',5,'MinSeparation',sep);

yf = interp1(xc(tf),yc(tf),xc,'spline');
ysub = yc-yf; % baseline subtracted data

%%% find peaks above threshold
thr = smthreshold; th2 = rmthreshold;
[~,locs] = findpeaks(ysub,'MinPeakHeight',thr);
[~,rloc1] = findpeaks(rcy,'MinPeakHeight',th2);

if ~exist('pad','var')
    pad = [];
    rloc = rloc1;
end

if length(pad) > 1
    rloc = [rloc1; round((pad(:,1)-cut)/dt,1)];
    nc = [nc;pad(:,2)];
end

rox = rcx(rloc); roy = rcy(rloc);

tr = ds(:);
prt = 0; pht = 0;
for i = 1:length(locs)
    n = locs(i);
    [val,idx]=min(abs(rloc-n));
    
    if val <= tr
        if nc(idx) == 17
            prhi = locs(i+1);
            prt = prhi(1);
            pridx = i+1;
        end
        if nc(idx) == 18
            phhi = locs(i+1);
            pht = phhi(1);
            phidx = i+1;
        end
    end

end

if prt == 0 || pht == 0
    PRPH = NaN; PR  = NaN; PH = NaN;
else
    
    dpp = [prt pht];
    bmin = zeros([2 1]); bmax = zeros([2 1]);
    for k = 1:length(dpp)
        i = dpp(k);
        while i > 1 && ysub(i-1) <= ysub(i)
            i = i - 1;
        end
        bmin(k) = i;
            i = dpp(k);
        while i < length(ysub) && ysub(i+1) <= ysub(i)
            i = i + 1;
        end
        bmax(k) = i;
     end


    At = zeros([length(bmin) 1]);
    for k=1:length(bmin)
        rgx = xc(bmin(k):bmax(k));
        rgy = ysub(bmin(k):bmax(k));
        if min(rgy) < 0
            rgy = rgy + abs(min(rgy));
        end
        At(k,:) = trapz(rgx,rgy);
        A = At;
    end

    PR = A(1); PH = A(2);
    PRPH = PR/PH;

    if strcmp(view,'yes')

    t = tiledlayout(2,1); t.TileSpacing = 'tight'; t.Padding = 'tight';
    
    nexttile
    plot(xc,ysub,'r'); hold on
    plot(xc(locs(pridx)),ysub(locs(pridx)),'vk');
    plot(xc(locs(phidx)),ysub(locs(phidx)),'vk'); 
    plot(xc(bmin),ysub(bmin),'^k');
    plot(xc(bmax),ysub(bmax),'^k'); hold off
    xlim(xl); grid minor; box on;
    for k=1:length(bmin)
        rgx = xc(bmin(k):bmax(k));
        rgy = ysub(bmin(k):bmax(k));
        patch(rgx,rgy,[0.7 0.7 0.7]);
    end
    text(0.99,0.95,DF.X.VN,'Units','normalized','HorizontalAlignment',...
        'right', 'Interpreter', 'none');
    text(xc(locs(pridx)),ysub(locs(pridx)),string(round(A(1),2)),'HorizontalAlignment','center',...
        'VerticalAlignment','bottom')
    text(xc(locs(phidx)),ysub(locs(phidx)),string(round(A(2),2)),'HorizontalAlignment','center',...
        'VerticalAlignment','bottom')
    legend('baseline subtracted response','detected Pr/Ph peaks','box','off', ...
        'Location','northwest')
    set(gca,'XTickLabel',[]); ylabel('Intensity');

    nexttile
    plot(rcx, rcy,'-k'); hold on
    plot(rox, roy,'vk'); hold off
    xlim(xl); box on; grid minor;
    legend('reference response','peaks',...
        'box','off','Location','northwest')
    xlabel('Retention Time'); ylabel('Intensity');
    text(rox,roy,string(nc),'HorizontalAlignment','center',...
        'VerticalAlignment','bottom')
    text(0.99,0.95,RM.X.VN,'Units','normalized','HorizontalAlignment',...
        'right', 'Interpreter', 'none');
    xlim(xl)
    end

    if strcmp(view,'no')
    
        % do nothing
    
    end



end




end


