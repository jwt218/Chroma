function [T] = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,varargin)

%PKCOMP Compare peaks of two samples
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2) returns a table or 
%   matrix of the difference in areas and heights of two chromatograms DF1
%   (S1) and DF2 (S2) using corresponding standard chromatograms RM1 and 
%   RM2 with components refcomp1 and refcomp2. DF and RM must be in the 
%   output data structure generated by the prepfiles function.
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'smthreshold',smth) sets 
%   the minimum threshold smth for peak detections in the sample 
%   chromatogram. The default is 100.
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'rmthreshold',rmth) sets 
%   the minimum threshold rmth for peak detections in the standard 
%   chromatogram. The default is 25000.
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'cutoff',cut) sets the 
%   start time for the analysis. For example, if the analysis window 
%   begins after 10 minutes, cut = 10 will remove all peaks before 10 
%   minutes. This is intended for the removal of detector responses from 
%   the solvent. The default is 10.
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'ds',ds) sets the 
%   acceptable uncertainty window for standard peak to sample peak 
%   correlations. Detected sample peaks outside the number of points 
%   specified by ds will be filtered out. The default is 40.
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'plt',v) gives the option 
%   for generating a figure after the analysis. Enter v = 'yes' to view 
%   the plot or v = 'no' otherwise. The default is v = 'yes'. 
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'xrange',x) defines the 
%   plotting range if the view option is activated. For chromatograms with 
%   time units in minutes, x = [11 25] plots only for the range 11-25 
%   minutes. The default is x = [11 25].
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'pad',p) allows for 
%   sample peak detections outside the availabe components in RM. For 
%   example, if the reference chromatogram RM contains components in the 
%   range 16-30, adding the argument p = [21.5 31] will tell chroma to 
%   search for a sample peak in DF at time 21.5 and assume it is the 
%   component C31. The 'pad' argument can include multiple components 
%   using the format:
% 
%   p = [21.5 31; 22.3 32; 23.2 33];
%
%   where the left column is time and the the right column is the component
%   number.
%
%   T = pkcomp(DF1,DF2,RM1,RM2,refcomp1,refcomp2,'out',m) specifies the 
%   output data format as a table m = 'tab' or matrix m = 'mat'.

defsmthreshold = 100;
defrmthreshold = 25000;
defcutoff = 10;
defds = 40;
defplt = 'yes';
defxrange = [11 25];
defpad = [];
defout = 'tab';

expplt = {'yes','no'};
expout = {'tab','mat'};

p = inputParser; 
validDF1 = @(x) length(DF1.X) == 1;
validDF2 = @(x) length(DF2.X) == 1;
validsmthreshold = @(x) isnumeric(x) && isscalar(x);
validrmthreshold = @(x) isnumeric(x) && isscalar(x);
validcutoff = @(x) isnumeric(x) && isscalar(x);
validds = @(x) isnumeric(x) && isscalar(x);
validplt = @(x) any(validatestring(x,expplt));
validxrange = @(x) isnumeric(x) && length(x) == 2;
validpad = @(x) isnumeric(x);
validout = @(x) any(validatestring(x,expout));

addRequired(p,'DF1',validDF1);
addRequired(p,'DF2',validDF2);
addRequired(p,'RM1');
addRequired(p,'RM2');
addRequired(p,'refcomp1');
addRequired(p,'refcomp2')

addParameter(p,'smthreshold',defsmthreshold,validsmthreshold)
addParameter(p,'rmthreshold',defrmthreshold,validrmthreshold)
addParameter(p,'cutoff',defcutoff,validcutoff)
addParameter(p,'ds',defds,validds)
addParameter(p,'plt',defplt,validplt)
addParameter(p,'xrange',defxrange,validxrange)
addParameter(p,'pad',defpad,validpad)
addParameter(p,'out',defout,validout)

parse(p,DF1,DF2,RM1,RM2,refcomp1,refcomp2,varargin{:})

if ~isempty(fieldnames(p.Unmatched))
   disp('Extra inputs:')
   disp(p.Unmatched)
end

DF1 = p.Results.DF1; DF2 = p.Results.DF2;
RM1 = p.Results.RM1; RM2 = p.Results.RM2;
refcomp1 = p.Results.refcomp1; refcomp2 = p.Results.refcomp2;
th = p.Results.smthreshold;
rth = p.Results.rmthreshold;
cutoff = p.Results.cutoff;
ds = p.Results.ds;
xrange = p.Results.xrange;
pad = p.Results.pad;
plt = p.Results.plt;
out = p.Results.out;


[MA1] = chroma(DF1,RM1,refcomp1,'smthreshold',th,'cutoff',cutoff,'ds',ds,...
    'view','no','xrange',xrange,'pad',pad,'out','mat','rmthreshold',rth);
[MA2] = chroma(DF2,RM2,refcomp2,'smthreshold',th,'cutoff',cutoff,'ds',ds,...
    'view','no','xrange',xrange,'pad',pad,'out','mat','rmthreshold',rth);

adiff = MA1(:,4) - MA2(:,4);
phdiff = MA1(:,5) - MA2(:,5);
aper = MA1(:,4)./MA2(:,4);
phper = MA1(:,5)./MA2(:,5);

nc = MA1(:,1);

D = [nc adiff phdiff aper phper];
cnames = {'Comp','Area Difference (S1-S2)','Height Difference (S1-S2)',...
    'Area Ratio (S1/S2)','Height Ratio (S1/S2)'};
T = array2table(D,'VariableNames',cnames);

if strcmp(plt,'yes')
    ch1 = DF1.X.M;
    ch2 = DF2.X.M;

    x1 = ch1(:,1); y1 = ch1(:,2);
    x2 = ch1(:,1); y2 = ch2(:,2);

    clf
    plot(x1,y1,'-b'); hold on
    plot(x2,y2,'-r'); hold off
    xlim(xrange); grid minor;
    xlabel('Time'); ylabel('Intensity');

    legend(sprintf('%s (S1)',DF1.X.VN),sprintf('%s (S2)',DF2.X.VN),...
        'Box','off','Location','northwest','interpreter','none')
elseif strcmp(plt,'no')
    % do nothing
end 
  
if strcmp(out,'mat')
    T = table2array(T);
end

end